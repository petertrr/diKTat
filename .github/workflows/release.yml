name: Create diKTat release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build release
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-release-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-release-
      - name: Set environment variables
        run: |
          echo ::set-env name=PREVIOUS_VERSION::$(printf 'VERSION=${diktat-check.version}\n0\n' | mvn help:evaluate | grep '^VERSION' | cut -d= -f2)
          echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#'refs/tags/v'}
      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ env.RELEASE_VERSION }} versions:commit
      - name: Create settings.xml
        uses: whelk-io/maven-settings-xml-action@v9
        with:
          servers: '[{ "id": "artipie", "username": "${{ secrets.ARTIPIE_USER }}", "password": "${{ secrets.ARTIPIE_PASSWORD }}" }]'
#      - name: Deploy artifacts
#        run: mvn -B clean deploy
#      - name: Create Github Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: ${{ github.ref }}
#          release_name: Release ${{ env.RELEASE_VERSION }}
#          draft: false
#          prerelease: false
#      - name: Upload assets to github releases
#        id: upload-release-asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./diktat-rules/target/diktat.jar
#          asset_name: diktat.jar
#          asset_content_type: application/zip
      - name: Update versions in pom.xml and documentation
        id: update-versions
        run: |
          mvn -B versions:set -DnextSnapshot=true -DprocessAllModules=true versions:commit
          mvn versions:set-property -Dproperty=diktat-check.version -DnewVersion=${{ env.RELEASE_VERSION }}
          sed -i "s/$PREVIOUS_VERSION/$RELEASE_VERSION/g" README.md
          sed -i "s/$PREVIOUS_VERSION/$RELEASE_VERSION/g" build.gradle.kts
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update diktat version after release
          branch: infra/diktat-version-update-to-${{ env.RELEASE_VERSION }}
          title: Update versions in pom.xml and documentation after ${{ env.RELEASE_VERSION }} release
          body: |
            * Versions are updated in pom.xml, README.md and build.gradle.kts
            * Current project version is incremented to the next snapshot
          base: master
